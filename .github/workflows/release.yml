name: Release Build

on:
  push:
    branches: [ main ]

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Needed to fetch tags
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install dependencies
        run: go mod download

      - name: Generate version
        run: |
          # Attempt to get the last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If there are no tags, this is the first release
            NEW_TAG="v0.1.0"
          else
            # Check if there are already tags in semver format
            if [[ $PREVIOUS_TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # If the tag is already in semver format, increment the patch version
              IFS='.' read -r major minor patch <<< "${PREVIOUS_TAG#v}"
              NEW_TAG="v$major.$minor.$((patch + 1))"
            else
              # If the tag is in the old format, start with v0.1.0
              NEW_TAG="v0.1.0"
              # Check if such a tag already exists
              while git rev-parse $NEW_TAG >/dev/null 2>&1; do
                # If the tag exists, increment the patch version
                IFS='.' read -r major minor patch <<< "${NEW_TAG#v}"
                NEW_TAG="v$major.$minor.$((patch + 1))"
              done
            fi
          fi
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
          # Get the short hash of the current commit
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "RELEASE_NAME=Release at #${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Build binaries
        run: |
          cd src
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o ../bin/undine-windows-amd64.exe
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o ../bin/undine-linux-amd64
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o ../bin/undine-darwin-amd64

      - name: Create source archive
        run: |
          # Create an archive with the source code, excluding binary files and temporary directories
          git archive --prefix=undine-${{ env.NEW_TAG }}/ --format=zip -o bin/undine-${{ env.NEW_TAG }}.zip HEAD

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: ${{ env.RELEASE_NAME }}
          files: |
            bin/undine-windows-amd64.exe
            bin/undine-linux-amd64
            bin/undine-darwin-amd64
            bin/undine-${{ env.NEW_TAG }}.zip
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
